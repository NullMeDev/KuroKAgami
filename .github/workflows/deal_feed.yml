name: Scrape & Post Deals

on:
  schedule:
    - cron: "*/15 * * * *"  # Run every 15 minutes
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Create data directory
        run: mkdir -p data

      - name: Scrape & post updates
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          echo "Running RSS and deals update..."
          python main.py --force all

      - name: Alert if errors
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              if (!fs.existsSync('metrics.json')) {
                console.log('metrics.json does not exist - likely an error in the scraper run');
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `Scraper Error - No Metrics File`,
                  body: `The scraper failed to create metrics.json. Please check the logs for errors.`
                });
                return;
              }
              
              const metrics = JSON.parse(fs.readFileSync('metrics.json'));
              if (metrics.errors && metrics.errors.length > 0) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `Scraper Encountered Errors`,
                  body: `Errors found during scraping:\n\n${metrics.errors.join('\n')}`
                });
              }
            } catch (error) {
              console.error('Error checking metrics:', error);
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Error Reading Metrics`,
                body: `Failed to process metrics.json: ${error.message}`
              });
            }
